version: '3.8'
services:
  client:
    build: 
      context: ./frontend
      dockerfile: ./.docker/prod.dockerfile
    command: /bin/sh -c "envsubst '$$CLIENT_HOSTNAME $$CLIENT_PORT'< /etc/nginx/conf.d/nginx.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'"
    volumes:
      - ./frontend/.docker/nginx.template:/etc/nginx/conf.d/nginx.template
    networks:
      - nginx-client-network

  api:
    build: 
      context: ./backend
      dockerfile: dockerfile
    command: /bin/sh -c "npm run start"
    volumes:
      - images_data:/app/images
    networks:
      - nginx-api-network

  nginx:
    container_name: nginx-reverse_proxy
    image: nginx:1.21-alpine
    restart: always
    volumes: 
      - ./nginx/nginx.template:/etc/nginx/conf.d/nginx.template
    #ports:
      #- "80"
    environment:
      - CLIENT_PORT=$CLIENT_PORT
      - CLIENT_HOSTNAME=$CLIENT_HOSTNAME
      - API_PORT=$API_PORT
      - API_HOSTNAME=$API_HOSTNAME
    command: /bin/sh -c "envsubst < /etc/nginx/conf.d/nginx.template > /etc/nginx/conf.d/default.conf && nginx -g 'daemon off;'" 
    networks:
      - reverse-proxy
      - nginx-api-network
      - nginx-client-network
    depends_on:
      - db
      - api
      - client

networks:
  nginx-api-network:
    driver: bridge
  nginx-client-network:
    driver: bridge
  reverse-proxy:
    driver: bridge

volumes:
  images_data:
